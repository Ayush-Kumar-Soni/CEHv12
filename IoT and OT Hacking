IoT and OT device hacking is performed to compromise smart devices such as CCTV cameras, automobiles, printers, door locks, washing machines, etc. to gain unauthorized access to network resources as well as IoT and OT devices.
# Perform Footprinting using Various Footprinting Techniques 
------------------------------------------------------------
-> The first step in IoT and OT device hacking is to extract information such as IP address, protocols used (MQTT, ModBus, ZigBee, BLE, 5G, IPv6LoWPAN, etc.), open ports, device type, geolocation of the device, manufacturing number, and manufacturer of the device.
-> Footprinting techniques are used to collect basic information about the target IoT and OT platforms to exploit them. Information collected through footprinting techniques includes IP address, hostname, ISP, device location, banner of the target IoT device, FCC ID information, certification granted to the device, etc.


# Gather Information using Online Footprinting Tools
----------------------------------------------------
The information regarding the target IoT and OT devices can be acquired using various online sources such as Whois domain lookup, advanced Google hacking, and Shodan search engine. The gathered information can be used to scan the devices for vulnerabilities and further exploit them to launch attacks.[we will focus on performing footprinting on the MQTT protocol, which is a machine-to-machine (M2M)/“Internet of Things” connectivity protocol. It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.]
1. Open Browser (Mozilla Firefox)  
  >>  https://www.whois.com/whois/  
  >>  www.oasis-open.org (in whois search bar)
(This information is about the organization that has developed the MQTT protocol, and it might help keep track of the modifications and version changes of the target protocol.)
2.  https://www.exploit-db.com/google-hacking-database   
  >>  type "SCADA" in the Quick Search field
3.open google 
  >> "login" intitle:"scada login"  
  >> result appears click any link (here, SCADA :: seamtec SCADA login ::)  [In the login form, you can brute-force the credentials to gain access to the target SCADA system.]
  >> intitle:"index of" scada  (to search sensitive SCADA directories that are exposed on sites)
4. https://account.shodan.io/login   
  >>   Shodan main page  
  >>  type port:1883 in the address bar(Port 1883 is the default MQTT port; 1883 is defined by IANA as MQTT over TCP) [displaying the list of IP addresses having port 1883 enabled]    
  >>  Click on any IP address to view its detailed information(Detailed results for the selected IP address appears, displaying information regarding Ports, Services, Hostnames, ASN, etc. as shown in the screenshot)
  >> Similarly, you can gather additional information on a target device using the following Shodan filters:
    > Search for Modbus-enabled ICS/SCADA systems =  port:502
    > Search for SCADA systems using PLC name = “Schneider Electric”
    > Search for SCADA systems using geolocation = SCADA Country:"US"
Using Shodan, you can obtain the details of SCADA systems that are used in water treatment plants, nuclear power plants, HVAC systems, electrical transmission systems, home heating systems, etc



Capture and Analyze IoT Traffic using Wireshark : 
------------------------------------------------

MQTT(tcp/1883) is a lightweight messaging protocol that uses a publish/subscribe communication pattern. Since the protocol is meant for devices with a low-bandwidth, it is considered ideal for machine-to-machine (M2M) communication or IoT applications

-> [windows server 2019 / 10.10.1.19]
	>>> MQTT Broker web interface(Bevywise_MQTTRoute_Win_64) : communicate iot devices through this server
	>>> chrome -> localhost:8080 send msg(ho gya grm)

-> [windows server 2022 /10.10.1.22] 
	>>> Bevywise IoT simulator(Bevywise_IoTSimulator_Win_64.exe ) : virtule iot device - client side(create virtule iot network and virtule iot device)
	>>> wireshark(mqtt)

 
